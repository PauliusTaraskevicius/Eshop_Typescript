// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  username String?
  email String? @unique
  emailVerified DateTime?
  image String?
  profileImage String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]

  // accounts Account[]
  // sessions Session[]
}


enum Categories {
  General @map("General")
  Men @map("Men")
  Women @map("Women")
} 

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  price Float
  homepage String
  thumbnail String
  brand String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category Categories? @default(General)
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  currentInventory Int
  description      String
}

// model Account {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   type String
//   provider String
//   providerAccountId String
//   refresh_token String? @db.String
//   access_token String? @db.String
//   expires_at Int?
//   token_type String?
//   scope String?
//   id_token String? @db.String
//   session_state String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }



// model Session {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String @unique
//   userId String @db.ObjectId
//   expires DateTime

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token String @unique
//   expires DateTime

//   @@unique([identifier, token])
// }
